/*
## 問題 7.7 💻🧪🖋️
本章で登場した sort 関数について考えてみよう。配列をソートする方法は色々なものが考えられる。例えば以下は「挿入ソート」と呼ばれるソートである。

問題を解決するための計算方法や処理の手順のことを [アルゴリズム](https://ja.wikipedia.org/wiki/%E3%82%BD%E3%83%BC%E3%83%88) と呼ぶ。
ソートのアルゴリズムには様々なものが存在している ([参考](https://ja.wikipedia.org/wiki/%E3%82%BD%E3%83%BC%E3%83%88))。

問題に対して複数のアルゴリズムが存在する場合、アルゴリズムをどうやって比較すべきだろうか。
具体的な計算時間は計算機によって結果が異なるため比較が難しい。
一般的にはアルゴリズムを [O-記法](https://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%B3%E3%83%80%E3%82%A6%E3%81%AE%E8%A8%98%E5%8F%B7#%E4%B8%80%E8%88%AC%E7%9A%84%E3%81%AA%E3%82%AA%E3%83%BC%E3%83%80%E3%83%BC) を用いた [時間計算量](https://ja.wikipedia.org/wiki/%E8%A8%88%E7%AE%97%E8%A4%87%E9%9B%91%E6%80%A7%E7%90%86%E8%AB%96#%E8%A8%88%E7%AE%97%E5%95%8F%E9%A1%8C%E3%81%A8%E8%A8%88%E7%AE%97%E9%87%8F%E3%83%BB%E8%A4%87%E9%9B%91%E6%80%A7) で評価する。
例えば上記の「挿入ソート」のアルゴリズムは配列の長さの二乗に計算時間が比例するため、配列の長さを $`n`$ とした時の時間計算量は $`O(n^2)`$ と表現される。

挿入ソート以外のソート関数を実装しなさい。また実装したアルゴリズムの入力の配列長 `n` に対する時間計算量を O-記法で説明しなさい。

**出題範囲**: 7.8.6.3
*/

// バブルソート
function bubbleSort(array) {
  const n = array.length;
  // 要素が1つだけの場合はソート済みとする
  if (n <= 1) return array;
  
  for (let i = 0; i < n - 1; i++) {
    // 各パスで最大の要素が右端に移動する
      for (let j = 0; j < n - i - 1; j++) {
          if (array[j] > array[j + 1]) {
              // 隣接する要素が順序が逆であれば交換する
              [array[j], array[j + 1]] = [array[j + 1], array[j]];
          }
      }
  }
  return array;
}

// サンプル配列を用意してバブルソートを実行
const sampleArray = [5, 3, 100, 2, 1, 1];
console.log("ソート前:", sampleArray);
console.log("バブルソート後:", bubbleSort(sampleArray));

/*
O-記法 を用いた 時間計算量
バブルソートは n 個の要素からなる列をソートするのに掛かる時間はO(n2) 
*/